<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.X</title>
  
  <subtitle>Mr.X的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiaoli1992.cn/"/>
  <updated>2018-06-13T09:55:11.024Z</updated>
  <id>http://www.xiaoli1992.cn/</id>
  
  <author>
    <name>xiaoli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令总结</title>
    <link href="http://www.xiaoli1992.cn/2018/06/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://www.xiaoli1992.cn/2018/06/13/Git常用命令总结/</id>
    <published>2018-06-13T03:45:23.000Z</published>
    <updated>2018-06-13T09:55:11.024Z</updated>
    
    <content type="html"><![CDATA[<p>对Git的命令总是不太清楚，在网上看了一些资料，然后总结也做个整理吧，写一遍，加深一下印象，不要总是看着去写，文章最后还有自己总结的Git命令思维导图一张。</p><p>废话不多说，开始正文</p><a id="more"></a><h3 id="Git的一些基础命令"><a href="#Git的一些基础命令" class="headerlink" title="Git的一些基础命令"></a>Git的一些基础命令</h3><h4 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h4><pre><code>git init //初始化git --version //查看git的版本信息git config --global user.name //获取当前登录的用户git config --global user.email //获取当前登录用户的邮箱git config --list //列出所有git当时能找到的配置</code></pre><h4 id="登录Git"><a href="#登录Git" class="headerlink" title="登录Git"></a>登录Git</h4><pre><code>/*如果刚没有获取到用户配置，则只能拉取2代码，不能修改。要是使用git,你要告诉git是谁在使用*/git config --global user.name &apos;userName&apos; //设置git账户，userName为你的git账号git config --global user.email &apos;email&apos;</code></pre><h4 id="创建一个文件夹"><a href="#创建一个文件夹" class="headerlink" title="创建一个文件夹"></a>创建一个文件夹</h4><pre><code>mkdir nodejs //创建文件夹nodejscd nodejs //切换到nodejs目录下</code></pre><h4 id="创建忽略文件"><a href="#创建忽略文件" class="headerlink" title="创建忽略文件"></a>创建忽略文件</h4><pre><code>touch .gitignore //不需要服务器端提交的内容写到忽略文件里</code></pre><h4 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h4><pre><code>ls -al</code></pre><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><pre><code>cat index.html</code></pre><h4 id="增加到暂缓区中"><a href="#增加到暂缓区中" class="headerlink" title="增加到暂缓区中"></a>增加到暂缓区中</h4><pre><code>git add index.htmlgit add -A //全部添加到缓存区</code></pre><h4 id="增加到版本库中"><a href="#增加到版本库中" class="headerlink" title="增加到版本库中"></a>增加到版本库中</h4><pre><code>git commit -m &apos;备注信息&apos;</code></pre><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><pre><code>git log --oneline</code></pre><h4 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h4><pre><code>git diff //比较的是暂存区和工作区的差异git diff --cached //比较的是暂存区和历史区的差异git diff master //比较的是历史区和工作区的差异（修改）git checkout idnex.html //用暂存区中的内容或者版本库中的内容覆盖掉工作区git reset HEAD index.html //取消增加到暂存区的内容（添加时）git status //显示目录的状态，有没有添加或者修改文件</code></pre><h4 id="删除本地文件"><a href="#删除本地文件" class="headerlink" title="删除本地文件"></a>删除本地文件</h4><pre><code>rm fileName</code></pre><h4 id="删除暂存区"><a href="#删除暂存区" class="headerlink" title="删除暂存区"></a>删除暂存区</h4><pre><code>git rm index.html --cached //保证当前工作区中index.html使用--cached表示只删除缓存区中的内容</code></pre><h4 id="回滚版本"><a href="#回滚版本" class="headerlink" title="回滚版本"></a>回滚版本</h4><pre><code>git reset --hard HEAD/commit_id //回滚最近的一个版本</code></pre><h4 id="操作记录查询"><a href="#操作记录查询" class="headerlink" title="操作记录查询"></a>操作记录查询</h4><pre><code>/*可以查看所有分支的操作记录（包括commit和reset的操作），包括已经被删除的commit记录，gitlog则不能察看已经删除了的commit记录*/git reflog</code></pre><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre><code>git branch dev</code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><pre><code>git checkout dev</code></pre><h4 id="创建分支并切换分支"><a href="#创建分支并切换分支" class="headerlink" title="创建分支并切换分支"></a>创建分支并切换分支</h4><pre><code>git checkout -b dev</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre><code>git branch -d dev</code></pre><h4 id="在分支上提交新的版本"><a href="#在分支上提交新的版本" class="headerlink" title="在分支上提交新的版本"></a>在分支上提交新的版本</h4><pre><code>git commit -a -m &apos;dev1&apos;</code></pre><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><pre><code>git merge dev</code></pre><h4 id="分支的合并后显示log"><a href="#分支的合并后显示log" class="headerlink" title="分支的合并后显示log"></a>分支的合并后显示log</h4><pre><code>git log --oneline --graph --decorate</code></pre><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><pre><code>git remote add origin &lt;repo&gt; //添加远程仓库git push -u origin master //添加本地master分支到远程仓库origin的master分支git push -u origin master --force //强制推送本地的master分支到远程仓库origin的master支付，会覆盖远程git pull //取回远程主机某个分支的更新，再与本地的指定分支合并git clone &lt;reponame&gt; //克隆远程仓库到本地git remote remove origin //删除本地与远程的关联git remote -v 查询绑定的远程仓库</code></pre><p>现在常用的就是这些了，get!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Git的命令总是不太清楚，在网上看了一些资料，然后总结也做个整理吧，写一遍，加深一下印象，不要总是看着去写，文章最后还有自己总结的Git命令思维导图一张。&lt;/p&gt;
&lt;p&gt;废话不多说，开始正文&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.xiaoli1992.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xiaoli1992.cn/tags/Git/"/>
    
      <category term="Github" scheme="http://www.xiaoli1992.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>注释那些事儿</title>
    <link href="http://www.xiaoli1992.cn/2018/04/27/%E6%B3%A8%E9%87%8A%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>http://www.xiaoli1992.cn/2018/04/27/注释那些事儿/</id>
    <published>2018-04-27T08:52:45.000Z</published>
    <updated>2018-04-27T09:23:46.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>好的注释可以提高代码的可读性和可维护性，从而提高代码质量。</strong></p></blockquote><p><strong>那么什么是好的注释？如何写出好的注释？本文将从注释的目的和原则出发对 JS 注释进行探讨。</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="1、注释的目的和原则"><a href="#1、注释的目的和原则" class="headerlink" title="1、注释的目的和原则"></a>1、注释的目的和原则</h3><h4 id="注释的目的："><a href="#注释的目的：" class="headerlink" title="注释的目的："></a>注释的目的：</h4><ul><li>提高代码的可读性，从而提高代码的可维护性</li></ul><h4 id="注释的原则："><a href="#注释的原则：" class="headerlink" title="注释的原则："></a>注释的原则：</h4><ul><li><p>如无必要，勿增注释 ( As short as possible )</p></li><li><p>如有必要，尽量详尽 ( As long as necessary )</p></li></ul><p>我们写注释，是为了给代码的读者（包括我们自己，也可能包括机器，如 jsdoc）看，帮助读者阅读理解代码并进行维护。</p><p>「如无必要，勿增注释」是指注释要避免过多过滥，不要为了注释而注释。多余的注释等价于冗余的代码，除了对增加可读性无益，一旦代码需要修改，修改注释也会是一大负担。<br>我们应当追求「代码自注释」，即代码本身就拥有较高的可读性（通过清晰的命名、合理的结构等）。举个例子：</p><pre><code>// bad// 如果已经准备好数据，就渲染表格if (data.success &amp;&amp; data.result.length &gt; 0) {  renderTable(data);  }// goodconst isTableDataReady = data.success &amp;&amp; data.result.length &gt; 0;if (isTableDataReady) {  renderTable(data);}</code></pre><p>「如有必要，尽量详尽」是指需要注释的地方应该尽量详尽地去写，以让阅读者可以充分了解代码的逻辑和意图为标准。</p><h3 id="2、什么是好注释，什么是坏注释"><a href="#2、什么是好注释，什么是坏注释" class="headerlink" title="2、什么是好注释，什么是坏注释"></a>2、什么是好注释，什么是坏注释</h3><p>根据注释的原则，我们应该以「能否帮助阅读者更好地阅读理解代码」为标准，判断一个注释「是否有必要」。</p><h4 id="好的注释包括："><a href="#好的注释包括：" class="headerlink" title="好的注释包括："></a>好的注释包括：</h4><ul><li><p>帮助读者更好地了解代码逻辑和结构，例如：</p><pre><code>init: function() {  // 获取配置信息  const config = getConfig();  // 获取用户信息  const userInfo = getUserInfo();  // 根据配置和用户信息，进行初始化  doInit(config, userInfo);  // 如果存在自定义配置时的特殊逻辑  if (config.custom) {    ...  }}</code></pre></li><li><p>特殊或不易理解写法的解释说明，例如：</p><pre><code>/** * parseInt was the reason my code was slow. * Bitshifting the String to coerce it to a * Number made it a lot faster. */const val = inputValue &gt;&gt; 0;</code></pre></li><li><p>特殊标记注释：如 TODO、FIXME 等有特殊含义的标记</p></li><li><p>文件注释：部分规约会约定在文件头部书写固定格式的注释，如注明作者、协议等信息</p></li><li><p>文档类注释：部分规约会约定 API、类、函数等使用文档类注释（如 jsdoc 风格）</p></li><li><p>遵循统一的风格规范，如一定的空格、空行，以保证注释自身的可读性</p></li></ul><h4 id="坏的注释包括："><a href="#坏的注释包括：" class="headerlink" title="坏的注释包括："></a>坏的注释包括：</h4><ul><li><p>注释对阅读代码无益：如本文第一个示例，本可以不用注释，用清晰的命名、逻辑进行代码自注释</p></li><li><p>未遵循统一的风格规范：如单行注释长度、空格、空行，例如：</p><pre><code>// bad 单行注释过长，不易阅读，应写成多行// parseInt was the reason my code was slow.Bitshifting the String to coerce it to Number made it a lot faster.const val = inputValue &gt;&gt; 0;// good/** * parseInt was the reason my code was slow. * Bitshifting the String to coerce it to a * Number made it a lot faster. */const val = inputValue &gt;&gt; 0;</code></pre></li><li>情绪性注释：如抱怨、歧视、搞怪等（被发现你就跪了）</li></ul><h3 id="3、如何写好注释"><a href="#3、如何写好注释" class="headerlink" title="3、如何写好注释"></a>3、如何写好注释</h3><h4 id="注释规约"><a href="#注释规约" class="headerlink" title="注释规约"></a>注释规约</h4><p>理解注释的目的和原则，制定并遵循一份注释规约，以保证注释的可读性和一致性</p><h4 id="工具保障"><a href="#工具保障" class="headerlink" title="工具保障"></a>工具保障</h4><p>比如使用 ESLint 保证注释风格的一致，使用 Sonar 检查项目注释率</p><h3 id="4、注释规约"><a href="#4、注释规约" class="headerlink" title="4、注释规约"></a>4、注释规约</h3><p>这里给出一份可供参考的注释规约（参考自airbnb规约）：</p><p>####4.1 【推荐】单行注释使用 //</p><p>注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面：</p><pre><code>// badconst active = true; // is current tab// good// is current tabconst active = true;注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性：    // badfunction getType() {   console.log(&apos;fetching type...&apos;);   // set the default type to &apos;no type&apos;  const type = this.type || &apos;no type&apos;;   return type;}// goodfunction getType() {   console.log(&apos;fetching type...&apos;);   // set the default type to &apos;no type&apos;  const type = this.type || &apos;no type&apos;;   return type;}// good// 注释行上面是一个块的顶部时不需要空行function getType() {   // set the default type to &apos;no type&apos;  const type = this.type || &apos;no type&apos;;                      return type;}</code></pre><h4 id="4-2-【推荐】多行注释使用-…-，而不是多行的"><a href="#4-2-【推荐】多行注释使用-…-，而不是多行的" class="headerlink" title="4.2 【推荐】多行注释使用 /* … /，而不是多行的 //"></a>4.2 【推荐】多行注释使用 /<em>* … </em>/，而不是多行的 //</h4><pre><code>// bad// make() returns a new element// based on the passed in tag namefunction make(tag) {  // ...  return element;}// good/** * make() returns a new element * based on the passed-in tag name */function make(tag) {  // ...  return element;}</code></pre><h4 id="4-3-【强制】注释内容和注释符之间需要有一个空格，以增加可读性。eslint-spaced-comment"><a href="#4-3-【强制】注释内容和注释符之间需要有一个空格，以增加可读性。eslint-spaced-comment" class="headerlink" title="4.3 【强制】注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment"></a>4.3 【强制】注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment</h4><pre><code>// bad//is current tabconst active = true;// good// is current tabconst active = true;// bad/** *make() returns a new element *based on the passed-in tag name */function make(tag) {    // ...  return element;}// good/** * make() returns a new element * based on the passed-in tag name */function make(tag) {   // ...  return element;}</code></pre><h4 id="4-4-【推荐】使用特殊注释标记"><a href="#4-4-【推荐】使用特殊注释标记" class="headerlink" title="4.4 【推荐】使用特殊注释标记"></a>4.4 【推荐】使用特殊注释标记</h4><p>有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：</p><ul><li><p>// FIXME: 说明问题是什么</p></li><li><p>// TODO: 说明还要做什么或者问题的解决方案</p></li></ul><pre><code>class Calculator extends Abacus {  constructor() {    super();    // FIXME: shouldn’t use a global here    total = 0;    // TODO: total should be configurable by an options param    this.total = 0;  }}</code></pre><h4 id="4-5-【推荐】文档类注释，如函数、类、文件、事件等，使用-jsdoc-规范"><a href="#4-5-【推荐】文档类注释，如函数、类、文件、事件等，使用-jsdoc-规范" class="headerlink" title="4.5 【推荐】文档类注释，如函数、类、文件、事件等，使用 jsdoc 规范"></a>4.5 【推荐】文档类注释，如函数、类、文件、事件等，使用 jsdoc 规范</h4><p>例如：</p><pre><code>/** * Book类，代表一个书本. * @constructor * @param {string} title - 书本的标题. * @param {string} author - 书本的作者. */function Book(title, author) {  this.title=title;  this.author=author;}Book.prototype={  /**   * 获取书本的标题   * @returns {string|*}   */  getTitle:function(){    return this.title;  },  /**   * 设置书本的页数   * @param pageNum {number} 页数   */  setPageNum:function(pageNum){    this.pageNum=pageNum;  }};</code></pre><h3 id="5、工具"><a href="#5、工具" class="headerlink" title="5、工具"></a>5、工具</h3><p>我们可以使用一些工具来保证注释质量，例如：</p><p><strong>Eslint：保证一致的注释风格</strong></p><p>ESLint 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：</p><ul><li><p>valid-jsdoc</p></li><li><p>require-jsdoc</p></li><li><p>no-warning-comments</p></li><li><p>capitalized-comments</p></li><li><p>line-comment-position</p></li><li><p>lines-around-comment</p></li><li><p>multiline-comment-style</p></li><li><p>no-inline-comments</p></li><li><p>spaced-comment</p></li></ul><p>Sonar：检查项目的注释率</p><p>Sonar 是一个代码持续集成平台，它可以对代码进行静态扫描，得到项目的注释率数据。</p><p>注释率反应了注释行占总代码行的比例，注释率太低不好，但也不能盲目追求高注释率。</p><p>另外，同 Eslint 类似，Sonar 也有一些针对注释风格规则可以配置。</p><h3 id="6、后记"><a href="#6、后记" class="headerlink" title="6、后记"></a>6、后记</h3><p>理解注释的目的和原则，遵循一份注释规约并结合工具保证落地，可以使注释成为代码良好的辅助，增强可读性和可维护性，从而提高代码质量。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;好的注释可以提高代码的可读性和可维护性，从而提高代码质量。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;那么什么是好的注释？如何写出好的注释？本文将从注释的目的和原则出发对 JS 注释进行探讨。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="注释" scheme="http://www.xiaoli1992.cn/categories/%E6%B3%A8%E9%87%8A/"/>
    
    
      <category term="注释" scheme="http://www.xiaoli1992.cn/tags/%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器详解</title>
    <link href="http://www.xiaoli1992.cn/2018/04/20/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xiaoli1992.cn/2018/04/20/CSS选择器详解/</id>
    <published>2018-04-20T09:32:18.000Z</published>
    <updated>2018-04-20T10:39:08.633Z</updated>
    
    <content type="html"><![CDATA[<p>选择器的种类有很多，可以到 <a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="external">w3cschool</a> 去看看了解一下。也可以在 <a href="http://www.imooc.com/learn/9" target="_blank" rel="external">慕课网</a> 中实践一下。</p><h3 id="一、上下文选择器"><a href="#一、上下文选择器" class="headerlink" title="一、上下文选择器"></a>一、上下文选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><pre><code>&lt;style&gt;  h1 {font-size: 16px;}  p {color:red;}&lt;/style&gt;</code></pre><p>代码中的h1和p就是选择器，他们是选择器里面最常用的一种，叫做<strong>标签选择器</strong>。我们可以直接通过标签元素来指定需要添加样式的位置。<br><a id="more"></a><br>如果我们需要为多个标签添加同一种样式时，我们可以把它们组合在一起，每个标签选择器用“,”隔开，如下：</p><pre><code>&lt;style&gt;  h1,h2,h3 {    font-weight: bold;    color: blue;  }&lt;/style&gt;</code></pre><p>这样的组合我们叫它<strong>分组选择器</strong>。</p><h4 id="后代组合选择器"><a href="#后代组合选择器" class="headerlink" title="后代组合选择器"></a>后代组合选择器</h4><p>当我们想为下面的article和aside的段落文本分别设置不同的字号时，我们就可以用到后代选择器了，它们是在祖先元素和后代元素之间加了一个空格，如代码所示：</p><pre><code>&lt;style&gt;  article p {    font-size: 12px;  }  aside p {    font-size: 14px;  }&lt;/style&gt;</code></pre><p>后代选择器有一个问题就是，祖先元素选择的后代元素都会带有样式，但是我们有时候并不需要所有的标签都带有样式，这个时候我们就要用到其他的选择器了。</p><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>我们可以用DOM中的父子元素关系来选择，也就是<strong>子选择器</strong>，两个元素中间用“&gt;”来连接，如代码所示：</p><pre><code>&lt;style&gt;  article&gt;p {    font-size: 12px;  }&lt;/style&gt;</code></pre><h4 id="同胞选择器"><a href="#同胞选择器" class="headerlink" title="同胞选择器"></a>同胞选择器</h4><p>我们也可以通过同胞关系来选择，叫做<strong>同胞选择器</strong>或者是<strong>兄弟选择器</strong>，这就意味着选择器的标签元素需要具有同一个父元素，它们之间用“+”来连接，例子：</p><pre><code>&lt;style&gt;  h2+p {    font-size: 12px;  }&lt;/style&gt;</code></pre><p>并且需要注意的是：p标签必须是紧跟在h2标签的后面。</p><h4 id="一般同胞选择器"><a href="#一般同胞选择器" class="headerlink" title="一般同胞选择器"></a>一般同胞选择器</h4><p>一般同胞选择器中间用“~”连接。</p><pre><code>&lt;style&gt;  h2~p {    font-size: 12px;  }&lt;/style&gt;</code></pre><p>一般同胞选择器和同胞选择器的区别就是，p标签不一定是紧跟在h2标签的后面。</p><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><p>通用选择器是使用通配符“ * ”，它可以匹配任何元素。比如：</p><pre><code>*｛  color: green;｝</code></pre><p>它会导致所有文本和边框都变成绿色。这里有个小知识：</p><p>color属性设定的是前景色。前景色既影响文本也影响边框，但通常我们只用它设定文本颜色。</p><p>我们也可以这样使用通用选择器：</p><pre><code>p* {  color: red;}</code></pre><p>这样只会把p包含的所有元素的文本变成红色。<br>通用选择器还有一个有意思的用法，就是可以用它构成一个非子选择器，比如：</p><pre><code>section*a {  font-size: 1.3em;}</code></pre><p>代码所表示的是，所有section的孙子元素，而非子元素的a标签都会被选中。这个从逻辑上来说也好理解，左边的section代表通配符的父元素，右边的a代表通配符的子元素，而*就是所有中间元素的集合。</p><p>以上就是通过DOM的层次结构的“上下文”关系来表示的选择器。</p><h3 id="二、id和类选择器"><a href="#二、id和类选择器" class="headerlink" title="二、id和类选择器"></a>二、id和类选择器</h3><p>id和类选择器是我们在CSS中常用的选择器，它们可以更精确的定位到我们要添加样式的标签位置。只要在HTML标记中为元素添加id和class属性，就可以通过id和类选择器直接选择。</p><p>可以给id和class属性设定任何值，但不能以数字或特殊符号开头。</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>body标签包含的任何HTML元素都可以添加class属性，如：</p><pre><code>&lt;h1 class=&quot;specialtext&quot;&gt;这是一个H1标签&lt;/h1&gt;&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;p class=&quot;specialtext featured&quot;&gt;这是另一个段落&lt;/p&gt;</code></pre><h5 id="1、类选择器"><a href="#1、类选择器" class="headerlink" title="1、类选择器"></a>1、类选择器</h5><p>然后我们就可以用类选择器添加样式了，类选择器前面要加一个“ . ” ，后面跟着类名，如下：</p><pre><code>&lt;style&gt;  p {    font-family: helvetica,sans-serif;  }  .specialtext {    font-style: italic;  }&lt;/style&gt;</code></pre><h5 id="2、标签带类选择器"><a href="#2、标签带类选择器" class="headerlink" title="2、标签带类选择器"></a>2、标签带类选择器</h5><p>当然，需要更精确的也可以这样写：</p><pre><code>&lt;style&gt;  p {    font-family: helvetica,sans-serif;  }  .specialtext {    font-style: italic;  }  p.specialtext {    color: red;  }  p.specialtext span{    font-weight: bold;  }&lt;/style&gt;</code></pre><p>第三个样式只选择带.specialtext类的p，第四就更精确到p中的span元素了。</p><h5 id="3、多类选择器"><a href="#3、多类选择器" class="headerlink" title="3、多类选择器"></a>3、多类选择器</h5><p>同个标签可以存在多个类属性，每个类都用空格分隔，要选择两个类名可以这样写：</p><pre><code>&lt;style&gt;  .specialtext.featured {    font-size: 120%;  }&lt;/style&gt;</code></pre><p><strong>注意：CSS类选择器的两个类名之间没有空格，如果加了空格就变成了“祖先/后代”关系的上下文选择器了。</strong></p><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>ID与类的写法相似，只不过id选择器前面用“ # ”后面跟着id名，</p><pre><code>&lt;style&gt;  #specialtext {    font-style: italic;  }&lt;/style&gt;*********&lt;p id=&quot;specialtext&quot;&gt;这是一个特殊段落&lt;/p&gt;</code></pre><p>id还可以用于页内导航</p><pre><code>&lt;a href=&quot;#bio&quot;&gt;Biography&lt;/a&gt;</code></pre><p>这样的链接就可以直接在页面内跳转到具有id名为“bio”的标签的位置。如果没想好“href”中放什么链接，也可以用“#”来充当占位符。</p><h4 id="什么时候用ID，什么时候用类"><a href="#什么时候用ID，什么时候用类" class="headerlink" title="什么时候用ID，什么时候用类"></a>什么时候用ID，什么时候用类</h4><h5 id="1、什么时候用id"><a href="#1、什么时候用id" class="headerlink" title="1、什么时候用id"></a>1、什么时候用id</h5><p>id的用途是在页面中唯一地标识一个元素，强调的是唯一性。每个id名称必须是不相同的，而且每个id名称在页面中只能用一次。尤其是于JavaScript关联时，相同的id可能会导致JS行为异常。</p><h5 id="2、什么时候用类"><a href="#2、什么时候用类" class="headerlink" title="2、什么时候用类"></a>2、什么时候用类</h5><p>类的目的是为了标识一组具有相同样式特征的元素，强调的是通用性。切不可乱用类，这样会增加需要编写和维护的CSS量。</p><h5 id="总结（来自知乎：Milo）"><a href="#总结（来自知乎：Milo）" class="headerlink" title="总结（来自知乎：Milo）"></a>总结（来自知乎：Milo）</h5><ul><li><p>ID具有唯一性，Class具有普遍性。</p></li><li><p>ID是唯一的，所以尽量在结构外围使用，通常用于页面布局。</p></li><li><p>Class是可重复的，所以尽量在结构内部使用，通常用于样式定义。</p></li><li><p>ID的样式优先级高于Class。</p></li></ul><h3 id="三、属性选择器"><a href="#三、属性选择器" class="headerlink" title="三、属性选择器"></a>三、属性选择器</h3><h4 id="属性名选择器"><a href="#属性名选择器" class="headerlink" title="属性名选择器"></a>属性名选择器</h4><p>我们可能会遇到这样的HTML代码：</p><pre><code>&lt;img sec=&quot;images/yellow_flower.jpg&quot; title=&quot;yellow flower&quot; alt=&quot;yellow flower&quot; /&gt;</code></pre><p>如果我们想要为带有title属性的图片添加样式，那么我们就可以用到<strong>属性名选择器</strong>了，如下：</p><pre><code>img[title] {  border: 2px solid blue;}</code></pre><p>这时，图片就会显示2像素宽的蓝色边框。一般来说title属性和alt属性都是设定相同的值，增加可阅读性。</p><h4 id="属性值选择器"><a href="#属性值选择器" class="headerlink" title="属性值选择器"></a>属性值选择器</h4><p>属性值选择器就更精确地定位我们所需要添加样式的位置了。如下：</p><pre><code>img[title=&quot;red flower&quot;] {  border: 4px solid green;}*********&lt;img src=&quot;images/red_flower.jpg&quot; title=&quot;red flower&quot; alt=&quot;red flower&quot; /&gt;</code></pre><p>只有在title属性值为“red flower”时，才会为图片加上边框样式。</p><h4 id="属性和值选择器-多个值"><a href="#属性和值选择器-多个值" class="headerlink" title="属性和值选择器-多个值"></a>属性和值选择器-多个值</h4><pre><code>[title~=&quot;hello&quot;]{  color: red;}</code></pre><p>该例子为包含指定值的title属性的所有元素设置样式,适用于由空格分隔的属性值。</p><pre><code>[lang|=en] {  color: red;}</code></pre><p>该例子为带有包含指定值的lang属性的所有元素设置样式。适用于由连字符分隔的属性值。</p><h4 id="设置表单样式"><a href="#设置表单样式" class="headerlink" title="设置表单样式"></a>设置表单样式</h4><pre><code>input[type=&quot;text&quot;]{  width: 50px;  display: block;}input[type=&quot;button&quot;]{  width:12opx;  margin-left:35px;}</code></pre><p>选择器参考手册</p><p>[attribute] 用于选取带有指定属性的元素。</p><p>[attribute=value] 用于选取带有指定属性和值的元素。</p><p>[attribute~=value] 用于选取属性值中包含指定词汇的元素。</p><p>[attribute|=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</p><p>[attribute^=value] 匹配属性值以指定值开头的每个元素。</p><p>[attribute$=value] 匹配属性值以指定值结尾的每个元素。</p><p>[attribute*=value] 匹配属性值中包含指定值的每个元素。</p><h3 id="四、伪类"><a href="#四、伪类" class="headerlink" title="四、伪类"></a>四、伪类</h3><p>伪类与类相似，但它并没有附加到标记中的标签上，所以称之为伪类，伪类分两种：</p><ul><li>UI伪类，会在html元素处于特定状态时，为该元素应用CSS样式。</li><li>结构化伪类，会在标记中存在某种结构上的关系时，为相应的元素引用CSS样式。</li></ul><h4 id="UI伪类"><a href="#UI伪类" class="headerlink" title="UI伪类"></a>UI伪类</h4><h5 id="1、链接伪类"><a href="#1、链接伪类" class="headerlink" title="1、链接伪类"></a>1、链接伪类</h5><p>针对连接的伪类一共有四个，也是我们常用伪类，它们的顺序也始终是这样的：</p><pre><code>a:Link {color: black;}            /*链接等待被点击*/a:visited {color: grey}           /*用户此前点击过此链接*/a:hover {text-decoration: none;}  /*鼠标悬停在这个链接上*/a:active {color:red;}             /*链接正在被点击（鼠标按下还没有释放）*/</code></pre><p><strong>一个冒号（:）表示伪类，两个冒号（::）表示CSS3新增的伪元素。</strong><br>很多时候不一定要将四个元素都写出来。而且这些伪类也可以用于任何元素，如下：</p><pre><code>p:hover {background-color: grey;}</code></pre><p>这条代码就可以使鼠标悬停在p标签位置时，背景颜色变为灰色。</p><h5 id="2、focus伪类"><a href="#2、focus伪类" class="headerlink" title="2、focus伪类"></a>2、focus伪类</h5><p>任何元素都可以运用focus伪类，但一般用于表单：</p><pre><code>input：focus ｛background-color: yellow;｝</code></pre><p>表单中的文本框在用户单击它时会获取焦点，同时为该文本框添加一个黄色背景。</p><h5 id="3、：target伪类"><a href="#3、：target伪类" class="headerlink" title="3、：target伪类"></a>3、：target伪类</h5><p>如果用户点击一个指向页面中其他元素的链接，则那个元素就是目标（target），可以用:target选中它。</p><pre><code>&lt;style&gt;  #more_info:target {background:#eee;}&lt;/style&gt;&lt;a href=&quot;#more_info&quot;&gt;More Information&lt;/a&gt;&lt;h2 id=&quot;more_info&quot;&gt;This is the information you are looking for.&lt;/h2&gt;</code></pre><p>用户单击链接跳转id为more_info的元素时，为该元素添加浅灰色背景。<strong>维基百科在其引证中就大量地使用了:target伪类。</strong></p><h4 id="结构化伪类"><a href="#结构化伪类" class="headerlink" title="结构化伪类"></a>结构化伪类</h4><h5 id="1、-first-child和-last-child"><a href="#1、-first-child和-last-child" class="headerlink" title="1、:first-child和:last-child"></a>1、:first-child和:last-child</h5><p>:first-child代表一组同胞元素中的第一个元素，而:last-child则代表最后一个。如下：</p><pre><code>&lt;style&gt;  ol.results li:first-child {    color: blue;  }  ol.results li:last-child {    color: red;  }&lt;/style&gt;&lt;ol class=&quot;results&quot;&gt;  &lt;li&gt;MY FAST PONY&lt;/li&gt;  &lt;li&gt;STEADY TROTTER&lt;/li&gt;  &lt;li&gt;SLOW OL&apos;NAG&lt;/li&gt;&lt;/ol&gt;</code></pre><h5 id="2、nth-child-n"><a href="#2、nth-child-n" class="headerlink" title="2、nth-child(n)"></a>2、nth-child(n)</h5><p>n可以是表示一个数值（也可以使用odd或者even表示奇数和偶数，也可用2n+1或者2n来表示），例如：</p><pre><code>li:nth-child(3) {color: grey;}</code></pre><p>:nth-child伪类最常用于提高表格的可读性，交替使用不同的颜色。</p><p>还有<strong>伪元素</strong>,内容有点多，就不一一介绍了。<br>参考资料：《CSS设计指南》、<a href="http://www.w3school.com.cn/" target="_blank" rel="external">w3cschool</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择器的种类有很多，可以到 &lt;a href=&quot;http://www.w3school.com.cn/cssref/css_selectors.asp&quot;&gt;w3cschool&lt;/a&gt; 去看看了解一下。也可以在 &lt;a href=&quot;http://www.imooc.com/learn/9&quot;&gt;慕课网&lt;/a&gt; 中实践一下。&lt;/p&gt;
&lt;h3 id=&quot;一、上下文选择器&quot;&gt;&lt;a href=&quot;#一、上下文选择器&quot; class=&quot;headerlink&quot; title=&quot;一、上下文选择器&quot;&gt;&lt;/a&gt;一、上下文选择器&lt;/h3&gt;&lt;h4 id=&quot;标签选择器&quot;&gt;&lt;a href=&quot;#标签选择器&quot; class=&quot;headerlink&quot; title=&quot;标签选择器&quot;&gt;&lt;/a&gt;标签选择器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  h1 {font-size: 16px;}
  p {color:red;}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码中的h1和p就是选择器，他们是选择器里面最常用的一种，叫做&lt;strong&gt;标签选择器&lt;/strong&gt;。我们可以直接通过标签元素来指定需要添加样式的位置。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.xiaoli1992.cn/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.xiaoli1992.cn/tags/CSS/"/>
    
      <category term="选择器" scheme="http://www.xiaoli1992.cn/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>js数组去重的几种方法</title>
    <link href="http://www.xiaoli1992.cn/2018/01/27/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://www.xiaoli1992.cn/2018/01/27/js数组去重的几种方法/</id>
    <published>2018-01-27T12:12:44.000Z</published>
    <updated>2018-01-27T16:15:24.789Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中经常后台返回的数据，用户的输入==，都会有重复的数据的可能，所以，处理重复的数据是不可避免的，就总结一下数组的几种常见的去重方法</p><h4 id="1-简单的去重方法"><a href="#1-简单的去重方法" class="headerlink" title="1.简单的去重方法"></a>1.简单的去重方法</h4><p>最简单的数组去重法<br>新建一新数组，遍历传入数组，值不在新数组就push进该数组中<br>IE8以下不支持数组的indexOf方法</p><pre><code>function uniq(array){    var temp = [];//一个新的临时数组    for(var i = 0; i &lt; array.length; i++){        if(temp.indexOf(array[i] == -1)){            temp.push(array[i]);        }    }    return temp;}var aa = [1,2,2,3,4,3,4,5,6,7,8];console.log(uniq(aa));</code></pre><a id="more"></a><h4 id="2-对象键值法去重"><a href="#2-对象键值法去重" class="headerlink" title="2.对象键值法去重"></a>2.对象键值法去重</h4><p>速度最快，占空间最多（空间换时间）<br>该方法执行的速度比其他任何方法都快，就是占用的内存大一些。</p><p>思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，不是的话给对象新增该键并放入数组。</p><p>注意点：判断是否为js对象键时，会自动对传入的键执行”toString()”,</p><p>不同的键可能会误认为一样，例如n[val] – n[1]、n[“1”];</p><p>解决上述问题还是得调用”indexOf”。</p><pre><code>function uniq(array){    var temp = {},r = [], len = array.length,val,type;    for(var i = 0; i &lt; len; i++){        var array[i];        type = typeof val;        if(!temp[val]){            temp[val] = [type];            r.push(val);        }else if(temp[val].indexOf(type) &lt; 0){            temp[val].push(type);            r.push(val);        }    }    return r;}var aa = [1,2,3,&quot;3&quot;,4,9,&quot;a&quot;,3,5];console.log(uniq(aa));</code></pre><h4 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a>3.排序后相邻去除法</h4><p>给传入数组排序，排序后相同值相邻，</p><p>然后遍历时，新数组只加入不与前一值重复的值。</p><p>会打乱原来数组的顺序</p><pre><code>function uniq(array){    array.sort();    var temp = [array[0]];    for(var i = 0; i &lt; array.length; i++){        if(array[i] !== temp[temp.length-1]){            temp.push(array[i]);        }    }    return temp;}var aa = [1,2,&quot;2&quot;,4,9,&quot;a&quot;,2,3,5,6];console.log(uniq(aa));</code></pre><h4 id="4-数组下标法"><a href="#4-数组下标法" class="headerlink" title="4.数组下标法"></a>4.数组下标法</h4><p>还是得调用”indexOf”性能跟方法1差不多，</p><p>实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i,</p><p>那么表示第i项是重复的，忽略掉。否则存入结果数组。</p><pre><code>function uniq(array){    var temp = [];    for(var i = 0;i &lt; array.length;i++){        //如果当前数组的第i项在当前数组中第一次出现的位置是i,才存入数组，否则代表是重复的        if(array.indexOf(array[i] == i)){            temp.push(array[i]);        }    }    return temp;}var aa = [1,2,&quot;2&quot;,4,9,&quot;a&quot;,&quot;a&quot;,2,3,5,6,5];console.log(uniq(aa));</code></pre><h4 id="5-优化遍历数组法"><a href="#5-优化遍历数组法" class="headerlink" title="5.优化遍历数组法"></a>5.优化遍历数组法</h4><p>思路：获取没重复的最右一值放入新数组<br>（检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）</p><pre><code>function uniq(array){    var temp = [],index = [];    var l = array.length;    for(var i = 0;i &lt; l;i++){        for(var j = i+1; j &lt; l;j++){            if(array[i] === array[j]){                i++;                j = i;            }        }        temp.push(array[i]);        index.push(i);    }    console.log(index);    return temp;}var aa = [1,2,2,3,5,3,6,5];console.log(uniq(aa));</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中经常后台返回的数据，用户的输入==，都会有重复的数据的可能，所以，处理重复的数据是不可避免的，就总结一下数组的几种常见的去重方法&lt;/p&gt;
&lt;h4 id=&quot;1-简单的去重方法&quot;&gt;&lt;a href=&quot;#1-简单的去重方法&quot; class=&quot;headerlink&quot; title=&quot;1.简单的去重方法&quot;&gt;&lt;/a&gt;1.简单的去重方法&lt;/h4&gt;&lt;p&gt;最简单的数组去重法&lt;br&gt;新建一新数组，遍历传入数组，值不在新数组就push进该数组中&lt;br&gt;IE8以下不支持数组的indexOf方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function uniq(array){
    var temp = [];//一个新的临时数组
    for(var i = 0; i &amp;lt; array.length; i++){
        if(temp.indexOf(array[i] == -1)){
            temp.push(array[i]);
        }
    }
    return temp;
}
var aa = [1,2,2,3,4,3,4,5,6,7,8];
console.log(uniq(aa));
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.xiaoli1992.cn/categories/JavaScript/"/>
    
      <category term="数组" scheme="http://www.xiaoli1992.cn/categories/JavaScript/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="JavaScript" scheme="http://www.xiaoli1992.cn/tags/JavaScript/"/>
    
      <category term="数组" scheme="http://www.xiaoli1992.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>js数组的一些基本操作</title>
    <link href="http://www.xiaoli1992.cn/2018/01/25/js%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.xiaoli1992.cn/2018/01/25/js数组的一些基本操作/</id>
    <published>2018-01-25T08:25:31.000Z</published>
    <updated>2018-01-26T12:20:37.062Z</updated>
    
    <content type="html"><![CDATA[<p>这几天因为工作上做的一些功能中需要大量的用到数组，对数组的各种操作，度娘了很多，基本上是需要用到什么就度娘什么，整理一下数组的知识，以后就不用总是去百度啦！</p><h3 id="创建数组的几种方式"><a href="#创建数组的几种方式" class="headerlink" title="创建数组的几种方式"></a>创建数组的几种方式</h3><h4 id="1、直接量创建"><a href="#1、直接量创建" class="headerlink" title="1、直接量创建"></a>1、直接量创建</h4><pre><code>var array = [];//创建一个空数组var array = [1,2,3];//创建一个有三个元素的数组</code></pre><h4 id="2、构造函数创建"><a href="#2、构造函数创建" class="headerlink" title="2、构造函数创建"></a>2、构造函数创建</h4><pre><code>var array = new Array();//创建空数组var array = new Array(10);//创建一个长度为10的数组var array = new Array(5,4,3,2,1)//创建数组并初始化</code></pre><a id="more"></a><h3 id="取值、赋值"><a href="#取值、赋值" class="headerlink" title="取值、赋值"></a>取值、赋值</h3><pre><code>var item = array[index];//获取指定元素的值array[index] = value; //为指定元素赋值</code></pre><h3 id="添加新元素"><a href="#添加新元素" class="headerlink" title="添加新元素"></a>添加新元素</h3><pre><code>array.push(item1,item2,...,itemN);//向数组的末尾添加一个或多个元素，并返回新数组的长度array.unshift(item1,item2,...,itemN);//向数组的开头添加一个或多个元素，并返回新的长度array.splice(index,howmany,item1,item2……itemN);//向/从数组中添加/添加项目，然后返回被删除的项目。//注释:该方法会改变原始数组index:必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置howmany:必需。要删除的项目数组。如果设置为0，则不会删除项目。item1,item2……itemN 可选。向数组添加的新项目</code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><pre><code>array.pop();//删除最后一个元素，并返回该元素array.shift();//删除第一个元素，数组元素位置自动迁移，返回被删除的元素array.splice(start,delCount);//从start的位置开始向后删除delCount个元素</code></pre><h4 id="根据指定下标删除数组元素"><a href="#根据指定下标删除数组元素" class="headerlink" title="根据指定下标删除数组元素"></a>根据指定下标删除数组元素</h4><p>列了这么都就是没有发现删除数组元素的方法！于是查了一些资料找到了解决方法。<br>删除数组元素需要扩展Array原型prototype<br>将一下代码放在全局js文件中</p><pre><code>Array.prototype.remove=function(obj){    for(var i = 0;i &lt; this.length;i++){        var temp = this[i];        if(!isNaN(obj)){            temp=i;        }        if(temp == obj){            for(var j = i;j &lt;this.length;j++){                this[j]=this[j+1];            }            this.length = this.length-1;        }    }}使用方法var arr =new Array();arr[0]=&quot;dddddd&quot;;arr[1]=&quot;dxxxxxxx&quot;;arr[2]=&quot;vvvvvvv&quot;;arr[3]=&quot;dbbbbb&quot;;var str =&quot;vvvvvvv&quot;;arr.remove(3);//删除下标为3的对象arr.remove(str);//删除对象值为“vvvvvvv”</code></pre><h3 id="数组的合并、截取"><a href="#数组的合并、截取" class="headerlink" title="数组的合并、截取"></a>数组的合并、截取</h3><pre><code>array.slice(start,end)//从已有的数组中返回选定的元素所组成的一个新数组，包含startdao end(不包括该元素)start:必需。规定从start开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。-1指最后一个元素，以此类推。end:可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。array.concat(array1,array2);//用于连接两个或多个数组该方法不会改变现有的数组，返回一个新的数组。</code></pre><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><pre><code>array.reverse();//数组反转array.sort();//数组排序，返回数组地址</code></pre><h3 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><pre><code>var a,,c;a = new Array(a,b,c,d,e);b = a.join(&apos;-&apos;);//a-b-c-d-e 使用-拼接数组元素c = a.join(&apos;&apos;);//abcde</code></pre><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><pre><code>var arr = new Array(3)arr[0] = &quot;George&quot;arr[1] = &quot;John&quot;arr[2] = &quot;Thomas&quot;document.write(arr.toString())输出：George,John,Thomas</code></pre><h3 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h3><pre><code>使用split()方法用于把一个字符串分割成字符串数组语法：stringObject.split(separator,howmany)separator：必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。howmany：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。例子1：var str=&quot;How are you doing today?&quot;document.write(str.split(&quot; &quot;) + &quot;&lt;br /&gt;&quot;)document.write(str.split(&quot;&quot;) + &quot;&lt;br /&gt;&quot;)document.write(str.split(&quot; &quot;,3))输出：How,are,you,doing,today?H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?How,are,you也可以使用正则表达式作为 separatorvar words = sentence.split(/\s+/)</code></pre><h3 id="清空数组的三种方法"><a href="#清空数组的三种方法" class="headerlink" title="清空数组的三种方法"></a>清空数组的三种方法</h3><h4 id="方法1：splice方法"><a href="#方法1：splice方法" class="headerlink" title="方法1：splice方法"></a>方法1：splice方法</h4><p>splice()方法用于插入、删除或替换数组的元素。</p><pre><code>var arr = [1, 2, 3, 4];arr.splice(2,1,&quot;Lemon&quot;,&quot;Kiwi&quot;);//第一个参数为删除和添加数组的起始位置，//第二个参数为删除多少个元素，//第三个参数为添加新的元素console.log(arr)//输出1,2,Lemon,Kiwi,4</code></pre><p>所以清空数组相当于删除数组中的所有元素</p><pre><code>var arr = [1, 2, 3, 4];arr.splice(0, arr.length);console.log(arr);//输出[]，空数组</code></pre><h4 id="方法2：赋值length为0"><a href="#方法2：赋值length为0" class="headerlink" title="方法2：赋值length为0"></a>方法2：赋值length为0</h4><p>javascript中数组的length和其他的语言的数组中length不同，js中数组length可以自己设置大小，意思是可读可写的，但其他语言如java,c++中都是不能进行修改，只读形式存在。<br>如java中对数组length赋值将报错</p><p>但在js中则可以修改，这样就达到了清空数组的目的</p><pre><code>var arr = [1, 2, 3, 4];arr.length = 0;console.log(arr);//输出[]，空数组</code></pre><h4 id="方法三：数组赋值"><a href="#方法三：数组赋值" class="headerlink" title="方法三：数组赋值[]"></a>方法三：数组赋值[]</h4><pre><code>var arr = [1, 2, 3, 4]; arr = [];这里其实并不能说是严格意义的清空数组，只是将arr重新赋值为空数组之前的数组如果没有引用在指向它将等待垃圾回收。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天因为工作上做的一些功能中需要大量的用到数组，对数组的各种操作，度娘了很多，基本上是需要用到什么就度娘什么，整理一下数组的知识，以后就不用总是去百度啦！&lt;/p&gt;
&lt;h3 id=&quot;创建数组的几种方式&quot;&gt;&lt;a href=&quot;#创建数组的几种方式&quot; class=&quot;headerlink&quot; title=&quot;创建数组的几种方式&quot;&gt;&lt;/a&gt;创建数组的几种方式&lt;/h3&gt;&lt;h4 id=&quot;1、直接量创建&quot;&gt;&lt;a href=&quot;#1、直接量创建&quot; class=&quot;headerlink&quot; title=&quot;1、直接量创建&quot;&gt;&lt;/a&gt;1、直接量创建&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var array = [];//创建一个空数组
var array = [1,2,3];//创建一个有三个元素的数组
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、构造函数创建&quot;&gt;&lt;a href=&quot;#2、构造函数创建&quot; class=&quot;headerlink&quot; title=&quot;2、构造函数创建&quot;&gt;&lt;/a&gt;2、构造函数创建&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var array = new Array();//创建空数组
var array = new Array(10);//创建一个长度为10的数组
var array = new Array(5,4,3,2,1)//创建数组并初始化
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.xiaoli1992.cn/categories/JavaScript/"/>
    
      <category term="数组" scheme="http://www.xiaoli1992.cn/categories/JavaScript/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="JavaScript" scheme="http://www.xiaoli1992.cn/tags/JavaScript/"/>
    
      <category term="数组" scheme="http://www.xiaoli1992.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>站在2018</title>
    <link href="http://www.xiaoli1992.cn/2018/01/22/%E7%AB%99%E5%9C%A82018/"/>
    <id>http://www.xiaoli1992.cn/2018/01/22/站在2018/</id>
    <published>2018-01-22T08:58:10.000Z</published>
    <updated>2018-01-22T08:58:10.741Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css五种方式实现页脚置底</title>
    <link href="http://www.xiaoli1992.cn/2017/05/12/css%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E9%A1%B5%E8%84%9A%E7%BD%AE%E5%BA%95/"/>
    <id>http://www.xiaoli1992.cn/2017/05/12/css五种方式实现页脚置底/</id>
    <published>2017-05-12T08:17:38.000Z</published>
    <updated>2018-01-22T09:44:15.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页脚置底（Stick-footer）就是让网页的footer部分始终在浏览器窗口的底部。"><a href="#页脚置底（Stick-footer）就是让网页的footer部分始终在浏览器窗口的底部。" class="headerlink" title="*页脚置底（Stick footer）就是让网页的footer部分始终在浏览器窗口的底部。"></a>*页脚置底（Stick footer）就是让网页的footer部分始终在浏览器窗口的底部。</h2><p>当网页内容足够长以至超出浏览器可视高度时，页脚会随着内容被推到网页底部；但如果网页不够长，置底的页脚就会保持在浏览器窗口底部。<br><a id="more"></a></p><p><img src="http://oojru7lbc.bkt.clouddn.com/footer_one.png" alt=""></p><h3 id="方法一：将内容部分的margin-bottom设为负数"><a href="#方法一：将内容部分的margin-bottom设为负数" class="headerlink" title="方法一：将内容部分的margin-bottom设为负数"></a>方法一：将内容部分的margin-bottom设为负数</h3><pre><code>&lt;div class=&quot;wrapper&quot;&gt;    &lt;!--content--&gt;    &lt;div class=&quot;push&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;css:html,body{    margin: 0;    padding: 0;    height: 100%;}.wrapper {    min-height: 100%;    margin-bottom: -50px;/*等于footer的高度*/}.footer,.push {    height: 50px;}</code></pre><p>1.这个方法需要容器里有额外的站位元素（div.push）。<br>2.div.wrapper的margin-bottom需要和div.footer的-height值一样，注意是负height。</p><h3 id="方法二：将页脚的margin-top设为负数"><a href="#方法二：将页脚的margin-top设为负数" class="headerlink" title="方法二：将页脚的margin-top设为负数"></a>方法二：将页脚的margin-top设为负数</h3><p>给内容外增加父元素，并让内容部分的padding-bottom与页脚的height相等。</p><pre><code>&lt;div class=&quot;content&quot;&gt;    &lt;div class=&quot;content-inside&quot;&gt;        &lt;!-- content --&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;css:html,body {    margin: 0;    padding: 0;    height: 100%;}.content{    min-height: 100%;}.content-inside {    padding: 20px;    padding-bottom: 50px;}.footer {    height: 50px;    margin-top: -50px;}</code></pre><h3 id="方法三：使用calc-设置内容高度"><a href="#方法三：使用calc-设置内容高度" class="headerlink" title="方法三：使用calc()设置内容高度"></a>方法三：使用calc()设置内容高度</h3><pre><code>&lt;div class=&quot;content&quot;&gt;    &lt;!-- content --&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;css:.content {    min-height: calc(100vh - 70px);}.footer {    height: 50px;}</code></pre><p>这里假设div.content和div.footer之间有20px的间距，所以70px=50px+20px</p><h3 id="方法四：使用flexbox弹性盒布局"><a href="#方法四：使用flexbox弹性盒布局" class="headerlink" title="方法四：使用flexbox弹性盒布局"></a>方法四：使用flexbox弹性盒布局</h3><p>以上三种方法的footer高度都是固定的，如果footer的内容太多则可能会破坏布局。</p><pre><code>&lt;div class=&quot;content&quot;&gt;    &lt;!-- content --&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;css:html {    height: 100%;}body {    min-height: 100%;    display: flex;    flex-direction: column;}.content {    flex: 1;}</code></pre><h3 id="方法五：使用Grid网格布局"><a href="#方法五：使用Grid网格布局" class="headerlink" title="方法五：使用Grid网格布局"></a>方法五：使用Grid网格布局</h3><pre><code>&lt;div class=&quot;content&quot;&gt;    &lt;!-- content --&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;css:html {    height: 100%;}body {    min-height: 100%;}.footer {    grid-row-start: 2;    grid-row-end: 3;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;页脚置底（Stick-footer）就是让网页的footer部分始终在浏览器窗口的底部。&quot;&gt;&lt;a href=&quot;#页脚置底（Stick-footer）就是让网页的footer部分始终在浏览器窗口的底部。&quot; class=&quot;headerlink&quot; title=&quot;*页脚置底（Stick footer）就是让网页的footer部分始终在浏览器窗口的底部。&quot;&gt;&lt;/a&gt;*页脚置底（Stick footer）就是让网页的footer部分始终在浏览器窗口的底部。&lt;/h2&gt;&lt;p&gt;当网页内容足够长以至超出浏览器可视高度时，页脚会随着内容被推到网页底部；但如果网页不够长，置底的页脚就会保持在浏览器窗口底部。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.xiaoli1992.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://www.xiaoli1992.cn/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="前端" scheme="http://www.xiaoli1992.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://www.xiaoli1992.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>吕蒙正-《破窑赋》</title>
    <link href="http://www.xiaoli1992.cn/2017/04/20/%E5%90%95%E8%92%99%E6%AD%A3-%E3%80%8A%E7%A0%B4%E7%AA%91%E8%B5%8B%E3%80%8B/"/>
    <id>http://www.xiaoli1992.cn/2017/04/20/吕蒙正-《破窑赋》/</id>
    <published>2017-04-20T14:58:44.000Z</published>
    <updated>2018-01-22T09:51:23.535Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一篇很好的文章，网上称之为千古奇文。</p><p>对古文知之甚少，初读，只觉得确实好，是不是千古奇文，大家自有评断。<br><a id="more"></a><br>好文章，那必须记录一下，待以后再细细品读。</p><h3 id="《破窑赋》，别名《寒窑赋》，是北宋大臣吕蒙正的作品，相传此赋是作者为了劝诫太子而创作的。"><a href="#《破窑赋》，别名《寒窑赋》，是北宋大臣吕蒙正的作品，相传此赋是作者为了劝诫太子而创作的。" class="headerlink" title="《破窑赋》，别名《寒窑赋》，是北宋大臣吕蒙正的作品，相传此赋是作者为了劝诫太子而创作的。"></a>《破窑赋》，别名《寒窑赋》，是北宋大臣吕蒙正的作品，相传此赋是作者为了劝诫太子而创作的。</h3><p>作者以自己从贫苦到富贵的经历，并列举了历史上诸多名人的起伏命运，来说明一种自然循环的人生思想。</p><p>如今读来，朗朗上口，其状物之精、明理之深，堪称一代奇文。</p><p>将社会的各种人情冷暖、现实无奈，写得那么真实且入心。</p><p><img src="http://oojru7lbc.bkt.clouddn.com/poyaofu_start.JPEG" alt="破窑赋"></p><h2 id="全文如下："><a href="#全文如下：" class="headerlink" title="全文如下："></a>全文如下：</h2><p>　　天有不测风云，人有旦夕祸福。蜈蚣百足，行不及蛇;雄鸡两翼，飞不过鸦。马有千里之程，无骑不能自往;人有冲天之志，非运不能自通。</p><p>　　盖闻人生在世，富贵不能淫，贫贱不能移。文章盖世，孔子厄于陈邦;武略超群，太公钓于渭水。颜渊命短，殊非凶恶之徒;盗跖年长，岂是善良之辈。尧帝明圣，却生不肖之儿;瞽叟愚顽，反生大孝之子。</p><p>　　张良原是布衣，萧何称谓县吏。晏子身无五尺，封作齐国宰相;孔明卧居草庐，能作蜀汉军师。楚霸虽雄，败于乌江自刎;汉王虽弱，竟有万里江山。</p><p>　　李广有射虎之威，到老无封;冯唐有乘龙之才，一生不遇。韩信未遇之时，无一日三餐，及至遇行，腰悬三尺玉印，一旦时衰，死于阴人之手。</p><p>　　有先贫而后富，有老壮而少衰。满腹文章，白发竟然不中;才疏学浅，少年及第登科。深院宫娥，运退反为妓妾;风流妓女，时来配作夫人。</p><p>　　青春美女，却招愚蠢之夫;俊秀郎君，反配粗丑之妇。蛟龙未遇，潜水于鱼鳖之间;君子失时，拱手于小人之下。</p><p>　　衣服虽破，常存仪礼之容;面带忧愁，每抱怀安之量。时遭不遇，只宜安贫守份;心若不欺，必然扬眉吐气。初贫君子，天然骨骼生成;乍富小人，不脱贫寒肌体。</p><p>　　天不得时，日月无光;地不得时，草木不生;水不得时，风浪不平;人不得时，利运不通。注福注禄，命里已安排定，富贵谁不欲?人若不依根基八字，岂能为卿为相?</p><p>吾昔寓居洛阳，朝求僧餐，暮宿破窖，思衣不可遮其体，思食不可济其饥，上人憎，下人厌，人道我贱，非我不弃也。</p><p>　　今居朝堂，官至极品，位置三公，身虽鞠躬于一人之下，而列职于千万人之上，有挞百僚之杖，有斩鄙吝之剑，思衣而有罗锦千箱，思食而有珍馐百味，出则壮士执鞭，入则佳人捧觞，上人宠，下人拥。人道我贵，非我之能也，此乃时也、运也、命也。</p><p>　　嗟呼!人生在世，富贵不可尽用，贫贱不可自欺，听由天地循环，周而复始焉。</p><p><img src="http://oojru7lbc.bkt.clouddn.com/poyaofu.jpg" alt=""></p><h2 id="【译文】"><a href="#【译文】" class="headerlink" title="【译文】"></a>【译文】</h2><p>　　天气的变化是很难预测的，人早晚的命运是很难说的。蜈蚣虽然有百十条腿，但爬行却不如蛇(快)。</p><p>　　家鸡的羽翅很大，但却不能像鸟儿一样飞翔。好马可以驰骋千里，但是没有人驾驭是不能来回的。每个人都有远大的志向，但是要有机会才可以飞黄腾达。</p><p>　　就算是文章再好，孔子尚且被困于陈蔡。打仗的方法再多，姜太公也是先在渭水河畔钓鱼。</p><p>　　偷盗的人活长了，不是善良的人。颜回的命短，却不是凶恶之徒。尧舜虽然是至圣的明君，却生下了不肖的儿子。瞽叟虽然顽皮呆板，但却生下世称大圣的儿子。</p><p>　　张良原本是老百姓，萧何称他是治县的能手。晏子身高不足五尺，却被封为齐国丞相。</p><p>　　孔明居住在草庐中，却能做西蜀的军师。韩信双手没有捉鸡的力气，却被封为汉朝的大将。</p><p>　　冯唐虽然有治国安邦的志向，到死也没有个一官半职。李广虽然有箭射猛虎的威名，却一直没有封侯。楚王项羽虽然兵强，难免吴江自刎。汉王刘邦虽兵弱，却有江山万里。</p><p>　　满腹的学问，一生没有中榜。只有一点的知识，在少年却已经当官。有的人是先富而后贫，有的人是有先贫而后富。</p><p>　　蛟龙没有被发现的时候，和鱼虾在一起。君子失宠时，委曲于小人的手下。天气不好的时候，太阳，月亮都没有光辉。大地不的时宜的时候，寸草不长。</p><p><img src="http://oojru7lbc.bkt.clouddn.com/poyaofu_end.jpeg" alt=""></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>　　河水不流畅时，水浪滔滔。人不的时宜时，即不能发财也不能做官。过去的时候，我在洛阳，白天在寺庙里读书，夜晚在破窑里住宿。</p><p>　　身上穿的破布衣服尚且不能掩盖我的全身，淡如水的米粥不能摊薄我的肚子。逼我好的人憎恨我，比我低的人讨厌我，都说我是贫贱的人!</p><p>　　我说：不是我贫贱，是时运和命运啊!等到我中了状元，官位到了最高，位列三公(三公，国代最高的官员)有鞭打百官的禅杖，有斩杀吝啬之徒的宝剑，出去的时候有士兵为我拿着鞭子，进家的时候有人为我提着衣服，想穿衣服有的是绫罗绸缎，先吃东西的时候有的是山珍海味。</p><p>　　上面的人宠信我，下面的人奉承我，人人都仰慕我，都说我是贵人!</p><p>　　“孔子尚困于陈邦”，春秋时期，孔子周游列国，被困于陈国的蔡地。</p><p>　　“太公垂钓于渭水”,姜尚为得到周文王的注意，在为谁钓鱼。</p><p>　　“盗跖年长，不是善良之辈”，盗跖，古代的一个盗匪。他活的名比较长，相传活了70岁。</p><p>　　“颜回命短”，颜回，孔子的弟子，从才华出众，可惜命短。</p><p>　　“尧舜至圣，却生不肖之子，”尧舜都是上古的明君，相传舜的儿子大禹是暴君。</p><h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>　　吕蒙正（944或946—1011），北宋大臣。字圣功，洛阳（今属河南省）人。公元977年（宋太宗太平兴国二年）丁丑科状元。授将作监丞，通判升州。再著作郎，入值史馆。公元980年（太平兴国五年），拜左补阙，知制诰。后任参知政事。公元988年（端拱元年），拜为宰相。为人质厚宽简，素有重望，以正道自持，遇事敢言。每论时政，有不允者，必不强力推行。与开国元老赵普同在相位，关系极为融洽。公元991年（淳化二年），贬为吏部尚书。两年后复以本官入相。公元995年（至道元年），再度罢相。真宗即位，任命吕蒙正为左仆射。公元1001年（咸平四年），第三次登上相位。后封莱国公，授太子太师。不久，因病辞官，回归故里。卒谥文穆，赠中书令。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一篇很好的文章，网上称之为千古奇文。&lt;/p&gt;
&lt;p&gt;对古文知之甚少，初读，只觉得确实好，是不是千古奇文，大家自有评断。&lt;br&gt;
    
    </summary>
    
      <category term="古诗词" scheme="http://www.xiaoli1992.cn/categories/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="古诗词" scheme="http://www.xiaoli1992.cn/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli+webpack项目环境搭建(一)</title>
    <link href="http://www.xiaoli1992.cn/2017/04/15/vue-cli-webpack%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E4%B8%80/"/>
    <id>http://www.xiaoli1992.cn/2017/04/15/vue-cli-webpack项目环境搭建-一/</id>
    <published>2017-04-15T07:33:37.000Z</published>
    <updated>2018-01-22T09:46:10.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h3 id="1-node-js安装"><a href="#1-node-js安装" class="headerlink" title="1.node.js安装"></a>1.node.js安装</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">node.js官网下载</a></p><p>最新的node.js都有自带npm（包管理工具）</p><p>安装完成后，可以在命令行中输入node -v He npm -v,如果能显示出版本号，就说明安装成功了。</p><p><img src="http://oojru7lbc.bkt.clouddn.com/node-npm-version.png" alt=""><br><a id="more"></a></p><p>毕竟npm的服务器在国外，有时候安装依赖的时候可能会很慢很慢，这个时候可以选择安装淘宝镜像来安装我们的依赖，安装命令如下：</p><pre><code>npm install -g cnpm --registry= https://registry.npm.taobao.org</code></pre><p>现在就可以使用cnpm来安装我们所需的各种依赖了。</p><h3 id="2-安装vue-cli"><a href="#2-安装vue-cli" class="headerlink" title="2.安装vue-cli"></a>2.安装vue-cli</h3><p>安装好node，我们可以直接全局安装vue-cli：</p><pre><code>npm install -g vue-cli</code></pre><p><strong>或者</strong></p><pre><code>cnpm install -g vue-cli</code></pre><p><strong>最新的vue项目模板中，都带有webpack插件，所以这里可以不安装webpack，安装完成后，可以使用vue -V(注意V大写)查看是否安装成功。如果提示“无法识别‘vue’”,有可能是npm版本过低，可以使用</strong></p><pre><code>npm install -g npm</code></pre><p><strong>更新版本</strong></p><h3 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3.创建项目"></a>3.创建项目</h3><p><strong>搭建方式</strong></p><pre><code># 使用vue-cli初始化项目vue init webpack my-project# 进入到目录cd my-project# 安装依赖npm install# 开始运行npm run dev</code></pre><p><strong>上面的这些命令会从 vuejs-templates 拉取模板并安装，然后用NPM安装依赖，最后你只需要用个NPM脚本启动就能开始开发了</strong></p><h3 id="官方模板"><a href="#官方模板" class="headerlink" title="官方模板"></a>官方模板</h3><p><strong>所有的官方模板都可以在<a href="https://github.com/vuejs-templates" target="_blank" rel="external"> vuejs-templates organization</a>找到。如果有一个新的模板放在了这里，你可以直接就用 vue init <template-name> <project-name> 使用。你也可以运行 vue list 命令来看看现在有哪些官方模板是现在可用的。</project-name></template-name></strong></p><h3 id="目前可供选择的模板："><a href="#目前可供选择的模板：" class="headerlink" title="目前可供选择的模板："></a>目前可供选择的模板：</h3><ul><li>browserify - 拥有高级功能的 Browserify + vueify 用于正式开发。</li><li>browserify-simple - 拥有基础功能的 Browserify + vueify 用于快速原型开发。</li><li>webpack - 拥有高级功能的 Webpack + vue-loader 用于正式开发。</li><li>webpack-simple - 拥有基础功能的 Webpack + vue-loader 用于快速原型开发。</li></ul><h3 id="4-生成项目"><a href="#4-生成项目" class="headerlink" title="4.生成项目"></a>4.生成项目</h3><p><strong>命令vue init webpack my-project执行之后，会在当前目录生成以该名称命名的项目文件夹</strong></p><p><img src="http://oojru7lbc.bkt.clouddn.com/vue-clifiles.png" alt=""></p><p><strong>配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目<br>然后进入项目目录（cd my-project），使用 npm 安装依赖</strong></p><pre><code>npm install</code></pre><p><strong>然后启动项目</strong></p><pre><code>npm run dev</code></pre><p>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件 config&gt;index.js</p><p><img src="http://oojru7lbc.bkt.clouddn.com/vue-clig.png" alt=""></p><p>建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ ./ ‘（原本为 ‘ / ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。</p><h3 id="5-打包上线"><a href="#5-打包上线" class="headerlink" title="5.打包上线"></a>5.打包上线</h3><p>自己的项目文件都需要放到 src 文件夹下<br>项目开发完成之后，可以输入 npm run build 来进行打包工作 </p><pre><code>npm run build</code></pre><p>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看<br>项目上线时，只需要将 dist 文件夹放到服务器就行了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;h3 id=&quot;1-node-js安装&quot;&gt;&lt;a href=&quot;#1-node-js安装&quot; class=&quot;headerlink&quot; title=&quot;1.node.js安装&quot;&gt;&lt;/a&gt;1.node.js安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;node.js官网下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最新的node.js都有自带npm（包管理工具）&lt;/p&gt;
&lt;p&gt;安装完成后，可以在命令行中输入node -v He npm -v,如果能显示出版本号，就说明安装成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oojru7lbc.bkt.clouddn.com/node-npm-version.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://www.xiaoli1992.cn/categories/Vue/"/>
    
      <category term="Vue基础" scheme="http://www.xiaoli1992.cn/categories/Vue/Vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue" scheme="http://www.xiaoli1992.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.xiaoli1992.cn/2017/04/11/hello-world/"/>
    <id>http://www.xiaoli1992.cn/2017/04/11/hello-world/</id>
    <published>2017-04-11T05:54:00.000Z</published>
    <updated>2018-01-22T09:26:23.165Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.xiaoli1992.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.xiaoli1992.cn/tags/hexo/"/>
    
      <category term="博客" scheme="http://www.xiaoli1992.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://www.xiaoli1992.cn/2017/04/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.xiaoli1992.cn/2017/04/05/我的第一篇博客/</id>
    <published>2017-04-05T08:02:24.000Z</published>
    <updated>2018-03-28T02:27:42.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前两天看了网站上别人的个人博客，哎呀我的妈，是真好看啊。<br>于是按照网上的资料也自己弄了一个，毕竟我也是有买了域名的人呀，<br>不能让域名白买了，其实不买域名其实也是可以的，既然有一个域名那就用上吧，显得逼格高</strong><br><a id="more"></a></p></blockquote><p><img src="http://oojru7lbc.bkt.clouddn.com/bigegao.jpg" alt="高逼格图片你看不到"></p><blockquote><p><strong>自己刚开始弄的时候觉得这个挺有逼格的，总的来说就是用了hexo+github来创建的，最基本就是这样了（所以其实并没有很高逼格的感觉）。</strong></p><p><strong>记录一下在创建这个个人博客时对我帮助比较大的几篇文章</strong></p><p>首先要用hexo肯定官网是最好最权威的：<a href="https://hexo.io/" target="_blank" rel="external">Hexo 官网</a><br>然后就是部署到github上去了：<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">Hexo+Github,搭建属于自己的博客</a>（这篇文章不是一般的“啰嗦”，作者写得好详细）<br>一个博客必须有个好看的主题：<a href="http://www.jianshu.com/p/f389ad8c49bd" target="_blank" rel="external">GithubPages+Hexo博客主题Yilia</a><br>Yilia主题作者的博客：<a href="http://litten.me/" target="_blank" rel="external">Litten的博客</a>（也是用的他的主题，拿人手短呀）  </p><p><strong>最后一个就是学习markdown的语法了，自己现在才勤快一点去接触这些东西，（真的太懒惰了，要挨三十大板），以后这个博客就是我的个人小天地了</strong><br><img src="http://oojru7lbc.bkt.clouddn.com/bg2.jpg" alt="装逼完毕"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前两天看了网站上别人的个人博客，哎呀我的妈，是真好看啊。&lt;br&gt;于是按照网上的资料也自己弄了一个，毕竟我也是有买了域名的人呀，&lt;br&gt;不能让域名白买了，其实不买域名其实也是可以的，既然有一个域名那就用上吧，显得逼格高&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.xiaoli1992.cn/categories/hexo/"/>
    
    
      <category term="博客" scheme="http://www.xiaoli1992.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="随笔" scheme="http://www.xiaoli1992.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
